
/////////////// Installation et Configuration Jenkins ///////////////

1- sudo apt install fontconfig openjdk-17-jre -y
2- sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
   https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
3- echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
   https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
   /etc/apt/sources.list.d/jenkins.list > /dev/null

4- sudo apt update
5- sudo apt install jenkins -y
6- sudo systemctl enable jenkins
7- sudo ufw allow 8080/tcp
8- sudo ufw reload
9- sudo cat /var/lib/jenkins/secrets/initialAdminPassword
10- sudo su -s /bin/bash - jenkins
11- ssh-keygen -t rsa -b 4096 -C "jenkins@example.com"
12- ssh-copy-id srv@192.168.1.117


13- Pipline Syntax 

			pipeline {
				agent any

				environment {
					GIT_REPO_URL = 'https://github.com/Saai0Kais/Jenkins-Sonarqube-Docker.git'
					DOCKER_IMAGE_NAME = 'web'
					SCANNER_HOME = tool "SonarScanner"
				}

				stages {
					stage ('Clean up workspace') {
				        steps {
				            cleanWs()
				        }
				    }
				
				
					stage('Checkout') {
						steps {
							checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: GIT_REPO_URL]]])
						}
					}
					
					
					stage('SonarQube Analysis') {
					  steps {
                             withSonarQubeEnv('Sonar-Server') {
                                sh ''' ${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=webapp'''
                                }
                            }
                        }
         
					
					stage('Clone Repository') {
						steps {
							sh "git clone https://github.com/Saai0Kais/Jenkins-Sonarqube-Docker.git /home/srv/website"
						}
					}
					
					stage('OWASP Dependency-Check Vulnerabilities') {
						steps {
							 dependencyCheck additionalArguments: ''' 
								-o './'
								-s './'
								-f 'ALL' 
								--prettyPrint''', odcInstallation: 'OWASP Dependency-Check Vulnerabilities'
					
						dependencyCheckPublisher pattern: 'dependency-check-report.html'
						}
					}
					
					stage('Lynis Security Scan') {
						steps {
							// Run Lynis security scan
							sh 'lynis audit system | ansi2html >> /home/srv/scanrep.html'
						}
					}
					
					stage('Build Docker Image') {
						steps {
							script {
								// Build Docker image
								sh "docker build -t web ."
							}
						}
					}
					
					stage('Trivy Scan') {
						steps {
							// Run Trivy container image scan
							sh 'trivy image web'
						}
					}

					stage('Run Docker Container') {
						steps {
							script {
								// Run Docker container
								sh "docker run -d -p 8010:80 --name ${DOCKER_IMAGE_NAME}-container ${DOCKER_IMAGE_NAME}"
							}
						}
					}
					
					 stage('Security Scan with Nikto') {
						steps {
							sh 'nikto -h localhost:8010 -o /home/srv/report.html'
						}
					}    
				}
				
				
				
				post {
					success {
						slackSend color: '#36a64f', message: "Deployment of myapp to production succeeded!"
					}
					failure {
						slackSend color: '#ff0000', message: "Deployment of myapp to production failed!"
					}
				}
			}


/////////////// Installation et Configuration Docker ///////////////

1- sudo apt install apt-transport-https ca-certificates curl software-properties-common
2- curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
3- echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
4- sudo apt update
5- apt-cache policy docker-ce
6- sudo apt install docker-ce
7- sudo systemctl status docker
8- sudo usermod -aG docker srv
9- sudo - srv
10- sudo usermod -aG docker jenkins
11- sudo chmod 666 /var/run/docker.sock


/////////////// Installation git ///////////////

1- sudo apt install git-all
2- git --version

/////////////// Installation Trivy ///////////////
1- sudo apt-get install wget apt-transport-https gnupg lsb-release
2- wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
3- echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
4- sudo apt-get update
5- sudo apt-get install trivy
6- sudo apt install mlocate
7- sudo apt install colorized-logs

/////////////// Installation Lynis ///////////////
1- echo "deb https://packages.cisofy.com/community/lynis/deb/ stable main" | sudo tee /etc/apt/sources.list.d/cisofy-lynis.list
2- wget -O - https://packages.cisofy.com/keys/cisofy-software-public.key | sudo apt-key add -
3- sudo apt update
4- sudo apt install lynis
5- lynis show version
6- sudo lynis audit system

/////////////// Installation Nikto ///////////////
1- sudo apt install nikto
2- nikto -h example.com

/////////////// Sonarqube  ///////////////
1- sudo apt update
2- java -version
3- sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" /etc/apt/sources.list.d/pgdg.list'
4- wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -
5- sudo apt install postgresql postgresql-contrib -y
6- sudo systemctl enable postgresql
7- sudo systemctl start postgresql
8- sudo systemctl status postgresql
9- psql --version
10- sudo -i -u postgres
11- createuser ddsonar
12- psql
13- ALTER USER ddsonar WITH ENCRYPTED password 'mwd#2%#!!#%rgs';
13- CREATE DATABASE ddsonarqube OWNER ddsonar;
14- GRANT ALL PRIVILEGES ON DATABASE ddsonarqube to ddsonar;
15- \l
16- \du
17- \q
18- exit
19- sudo apt install zip -y
20- sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-10.0.0.68432.zip
21- sudo unzip sonarqube-10.0.0.68432.zip
22- sudo mv sonarqube-10.0.0.68432 sonarqube
23- sudo mv sonarqube /opt/
24- sudo groupadd ddsonar
25- sudo useradd -d /opt/sonarqube -g ddsonar ddsonar
26- sudo chown ddsonar:ddsonar /opt/sonarqube -R
27- sudo nano /opt/sonarqube/conf/sonar.properties
	sonar.jdbc.username=ddsonar
	sonar.jdbc.password=mwd#2%#!!#%rgs
	sonar.jdbc.url=jdbc:postgresql://localhost:5432/ddsonarqube
	
28-sudo nano /opt/sonarqube/bin/linux-x86-64/sonar.sh
	RUN_AS_USER=ddsonar

29-sudo nano /etc/systemd/system/sonar.service
	[Unit]
	Description=SonarQube service
	After=syslog.target network.target
	[Service]
	Type=forking
	ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
	ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop
	User=ddsonar
	Group=ddsonar
	Restart=always
	LimitNOFILE=65536
	LimitNPROC=4096
	[Install]
	WantedBy=multi-user.target
	
30- sudo systemctl enable sonar
31- sudo systemctl start sonar
32- sudo systemctl status sonar
33- sudo nano /etc/sysctl.conf
	vm.max_map_count=262144
	fs.file-max=65536
	ulimit -n 65536
	ulimit -u 4096
	
34- sudo reboot





/////////////// Grafana Prometheus  ///////////////
I- Prometheus

1- sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false prometheus
	
2- sudo wget https://github.com/prometheus/prometheus/releases/download/v2.32.1/prometheus-2.32.1.linux-amd64.tar.gz
3- sudo tar -xvf prometheus-2.32.1.linux-amd64.tar.gz
4- sudo mkdir -p /data /etc/prometheus
5- cd prometheus-2.32.1.linux-amd64
6- sudo mv prometheus promtool /usr/local/bin/
7- sudo mv consoles/ console_libraries/ /etc/prometheus/
8- sudo mv prometheus.yml /etc/prometheus/prometheus.yml
9- sudo chown -R prometheus:prometheus /etc/prometheus/ /data/
10- cd
	sudo rm -rf prometheus*
11- prometheus --version
12- prometheus --help
13- sudo nano /etc/systemd/system/prometheus.service
	[Unit]
	Description=Prometheus
	Wants=network-online.target
	After=network-online.target

	StartLimitIntervalSec=500
	StartLimitBurst=5

	[Service]
	User=prometheus
	Group=prometheus
	Type=simple
	Restart=on-failure
	RestartSec=5s
	ExecStart=/usr/local/bin/prometheus \
	  --config.file=/etc/prometheus/prometheus.yml \
	  --storage.tsdb.path=/data \
	  --web.console.templates=/etc/prometheus/consoles \
	  --web.console.libraries=/etc/prometheus/console_libraries \
	  --web.listen-address=0.0.0.0:9090 \
	  --web.enable-lifecycle

	[Install]
	WantedBy=multi-user.target

14- sudo systemctl enable prometheus
15- sudo systemctl start prometheus
16- sudo systemctl status prometheus



17- sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false node_exporter
	
18- sudo wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz
19- sudo tar -xvf node_exporter-1.3.1.linux-amd64.tar.gz
20- sudo mv \
  node_exporter-1.3.1.linux-amd64/node_exporter \
  /usr/local/bin/
21- sudo rm -rf node_exporter*
22- node_exporter --version
23- sudo nano /etc/systemd/system/node_exporter.service
	[Unit]
	Description=Node Exporter
	Wants=network-online.target
	After=network-online.target

	StartLimitIntervalSec=500
	StartLimitBurst=5

	[Service]
	User=node_exporter
	Group=node_exporter
	Type=simple
	Restart=on-failure
	RestartSec=5s
	ExecStart=/usr/local/bin/node_exporter \
		--collector.logind

	[Install]
	WantedBy=multi-user.target
24- sudo systemctl enable node_exporter
25- sudo systemctl start node_exporter
26- sudo systemctl status node_exporter
27- sudo nano /etc/prometheus/prometheus.yml
	 - job_name: "node_export"
    static_configs:
      - targets: ["localhost:9100"]
28- promtool check config /etc/prometheus/prometheus.yml

II- Grafana
1- sudo apt-get install -y apt-transport-https software-properties-common
2- wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
3- echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
4- sudo apt-get update
5- sudo apt-get -y install grafana
6- sudo systemctl enable grafana-server
7- sudo systemctl start grafana-server
8- sudo systemctl status grafana-server


/////////////// OpenLDAP  ///////////////

I- LDAP - Install and Configure OpenLDAP & LDAP Account Manager (LAM) 
	1- sudo apt-get update
	2- sudo apt install net-tools
	3- hostname
	4- hostname -f
	5- sudo nano /etc/hostname
		ldap-1
	6- sudo nano /etc/hosts
		127.0.0.1	ldap-1.geek4it.local ldap-1
		@IP			ldap-1.geek4it.local ldap-1

	7- sudo systemctl restart systemd-hostnamed
	8- sudo apt install apache2 php php-cgi libapache2-mod-php php-mbstring php-common php-pear -y
	9- sudo apt install slapd ldap-utils -y
	10- systemctl status slapd
	11- sudo slapcat
	12- sudo apt -y install ldap-account-manager
	13- sudo a2enconf php*-cgi
	14- sudo systemctl restart apache2
	15- sudo systemctl enable apache2
	16- sudo systemctl status apache2
	17- Navigate http:///@IP/lam
	18- sudo ufw enable
	19- sudo ufw allow 80
	20- sudo ufw allow 443
	21- sudo ufw allow 389 
	22- sudo ufw status
	

II- LDAP - Create OUs Groups and User Account in OpenLDAP Account Manager
	1- Navigate http:///@IP/lam
	2- sudo slapcat
	
III- LDAP - Install and Configure OpenLDAP Client
	1- systemctl status slapd
	2- sudo apt-get update
	3- sudo apt install net-tools
	4- hostname
	5- hostname -f
	6- sudo nano /etc/hostname
		ldap-2
	7- sudo nano /etc/hosts
		127.0.0.1	ldap-2.geek4it.local
		@IP			ldap-2.geek4it.local ldap-2
		@IP_LDAP    ldap-1.geek4it.local
		
	8- sudo systemctl restart systemd-hostnamed
	9- ping ldap-1.geek4it.local
	10- sudo apt install libnss-ldap libpam-ldap ldap-utils nscd -y
	11- sudo nano /etc/nsswitch.conf
		passwd:         compat systemd ldap
		group:          compat systemd ldap
		shadow:         compat
	
	12- sudo nano /etc/pam.d/common-password
		password        [success=1 user_unknown=ignore default=die]     pam_ldap.so try_first_pass
	
	13- sudo nano /etc/pam.d/common-session
		session optional pam_mkhomedir.so skel=/etc/skel umask=077
	
	14- sudo systemctl restart nscd
	15- sudo systemctl enable nscd
	16- ldapsearch -x -H ldap://IP-of-LDAP-Server -b "dc=geek4it,dc=local"
	17- sudo login
		it01
		ldap2024
		
IV- LDAP - Configure & Secure OpenLDAP Server with SSL/TLS
	i- In Server
		1- systemctl status slapd
		2- mkdir ssl-ldap
		3- cd ssl-ldap
		4- openssl genrsa -aes128 -out ldap-1.geek4it.local.key 4096
		5- openssl rsa -in ldap-1.geek4it.local.key -out ldap-1.geek4it.local.key
		6- openssl req -new -days 3650 -key ldap-1.geek4it.local.key -out ldap-1.geek4it.local.csr
			Country Name (2 letter code) [AU]:TN
			State or Province Name (full name) [Some-State]:SF
			Locality Name (eg, city) []:Sfax
			Organization Name (eg, company) [Internet Widgits Pty Ltd]:PH
			Organizational Unit Name (eg, section) []:PH
			Common Name (e.g. server FQDN or YOUR name) []:ldap-1.geek4it.local
			Email Address []:geek4it@gmail.com           

		7- sudo openssl x509 -in ldap-1.geek4it.local.csr -out ldap-1.geek4it.local.crt -req -signkey ldap-1.geek4it.local.key -days 3650
		8- sudo cp ldap-1.geek4it.local.key /etc/ldap/sasl2/
		9- sudo cp ldap-1.geek4it.local.crt /etc/ldap/sasl2/
		10- sudo cp /etc/ssl/certs/ca-certificates.crt /etc/ldap/sasl2/
		11- sudo chown -R openldap:openldap /etc/ldap/sasl2
		12- nano SSL-LDAP.ldif
			dn: cn=config
			changetype: modify
			add: olcTLSCACertificateFile
			olcTLSCACertificateFile: /etc/ldap/sasl2/ca-certificates.crt
			-
			replace: olcTLSCertificateFile
			olcTLSCertificateFile: /etc/ldap/sasl2/ldap-1.geek4it.local.crt
			-
			replace: olcTLSCertificateKeyFile
			olcTLSCertificateKeyFile: /etc/ldap/sasl2/ldap-1.geek4it.local.key
		13- sudo ldapmodify -Y EXTERNAL -H ldapi:/// -f SSL-LDAP.ldif
		14- sudo nano /etc/default/slapd 
			SLAPD_SERVICES="ldap:/// ldapi:/// ldaps:///"
		15- sudo nano /etc/ldap/ldap.conf
			TLS_CACERT	/etc/ldap/sasl2/ca-certificates.crt
			TLS_REQCERT	allow
		16- systemctl restart slapd
		17- systemctl status slapd
		18- ldapsearch -x -H ldaps://IP-of-LDAP-Server -b "dc=geek4it,dc=local"
		19- netstat -antup | grep -i 636  
		20- sudo ufw allow 636
		21- sudo ufw status
		
	i- In Client
		1- sudo nano /etc/ldap/ldap.conf
			TLS_REQCERT	allow
		2- sudo nano /etc/ldap.conf
			uri ldaps://192.168.1.105
			ssl start_tls
			ssl on
			ldapsearch -x -H ldaps://IP-of-LDAP-Server -b "dc=geek4it,dc=local"

